{
    "bqDo2yqlb2c": "Welcome to the Real Python Podcast. This is episode 219. Are you interested in practicing your Python skills while learning how to solve astrophysics and astronomy problems? Christopher Trudeau is back on the show this week, bringing another batch of PyCoders Weekly articles and projects. Christopher shares a pair of his recent Real Python video courses about exploring astronomy and astrophysics with Python. Throughout the courses, you get to practice using a variety of data science libraries such as NumPy, Matplotlib, Pandas, Pint, and Astropy.\n\nWe also speak with Manny Young, who is the organizing committee chair of PyCon Africa. Real Python is excited to be a contributing sponsor of this year's conference. Manny discusses reinvigorating a continent-spanning conference after a multi-year hiatus. He also talks about introducing Python to students and new developers across Africa through Pi Clubs, Pi Ladies, and Pi Data programs.\n\nWe share several other articles and projects from the Python community, including a news roundup, logging in Python, understanding operator precedence, reconciling why it only works on your machine, a fast way to create an HTML app, and a tool for deep inspection of Python objects.\n\nThis episode is brought to you by InfluxData. InfluxDB is a purpose-built time series platform for ingesting, storing, and analyzing metrics, events, and logs with subsecond query responses and high interoperability. Start now at influxdata.com.\n\nAlright, let's get started. The Real Python Podcast is a weekly conversation about using Python in the real world. My name is Christopher Bailey, your host. Each week, we feature interviews with experts in the community and discussions about the topics, articles, and courses found at Real Python. After the podcast, join us and learn real-world Python skills with the community of experts at Real Python.\n\nHey Christopher, welcome back.\n\nHey there. We kind of have a special guest this week. We have Manny Young who's organizing PyCon Africa with a whole team there. I wanted to have him reach out and talk about what's happening there. That'll be at the end of the show this week. But we have at least a few of our regular items here. We've got some news, topics, and projects that I want to dig into. So, what do you got for news?\n\nWell, speaking of regular, I think this is a milestone. We have gone through an episode without having to say there is a release candidate or a beta of 3.13. There was no 3.13 news this week. So, we make the sound effect, basically, whatever the opposite of. It's like a shrug, whatever. Let's start. There are two new PEPs. PEP 750 is tag strings for domain-specific languages. This is F-strings on steroids. The idea is to extend the F-string concept into a processable templating language. You define a function known as a tag and then you prefix your string with the name of that function, the tag name. So, the PEP uses an example of \"greet\" as the function, and then \"greet\" quote \"templated string\". What happens is with this mechanism, the function gets invoked when the string is processed, allowing for validation and processing connected to the string being instantiated. A good example of this is you could use it as an SQL sanitizer and then be able to use a tag string for SQL parameters. So, if you use an F-string for SQL, don't do that. You're open to injection attacks, and all the SQL libraries have other mechanisms for dealing with this so that you're not having the injection problem. The idea here is with a tag processor, you could have a sanitizer that correctly escapes everything to ensure it doesn't happen.\n\nThere have actually been a couple of PEPs related to this idea before. They came out a long time ago, connected to the F-string space, and they were all, \"Hey, that's an interesting idea, but let's not talk about it now because we don't know if F-strings are going to work.\" So, they basically waited until F-strings have happened, and now it's resurfaced. They're pretty solid now. F-strings are definitely the way to do things, without a doubt. Yeah. There's also some connection here to things like domain-specific languages, and it's an interesting idea. I'm dubious about the syntax for it. I love the idea, but the syntax I find hard to grasp. Just the idea that you have words in front of the string, and then of course, if you accidentally don't know that you can put \"R\" in front of a string, then your tag is not going to work. So, I wish there was some other way of doing this, but I don't have a suggestion. But the fundamental concept is a solid one.\n\nMaybe it'll get worked out in discussion as far as the formatting possibly. Yeah, you never know. And then the second PEP is 752, which is package repository namespaces. This proposes a way to reserve a prefix for package names for an organization. The intent here is to help with name squatting in PIP. For example, if Real Python registered our name as a prefix, nobody but associated accounts with Real Python would be able to create a package with the Real Python prefix. For backward compatibility, existing prefixes will be allowed. It just will be a restriction on new packages to avoid the whole domain name-style web rush. This is really only being proposed for corporate, large open source projects, universities, governments, and NGOs. Nice.So it's interesting and it does help. Obviously, Microsoft, Google, and Amazon don't want other people having Microsoft, Google, and Amazon as the prefix in their name for security reasons. Good reasons not to allow that. So this will probably help with that kind of thing. It sounds like it's been a work in progress. I'm interested in this. I think this might be a good way to approach that.\n\nThe PEP mentions a couple of different approaches other languages take in this space. One of them uses a modifies the syntax name. So like there's an at in front of the package name and they decided let's not add an extra character. The only thing it would have solved was the backward compatibility thing because this isn't really a language change, it's a process change on how pip will handle packages. As a result, they can be flexible about it. There's going to be a human being making judgment calls about whether or not you should be able to have that or no you shouldn't. Good, it really just gives the pip folks permission to act reasonably and removes the threat of certain kinds of bad actors in certain kinds of situations, which is good.\n\nA whole category, well yeah, a subset of a category. But yeah, I guess so. You can still typo squad on one of my packages because it won't have a prefix. And then the last bit of news is the videos from PyCon US, which was back in May, are now live. It was a record-breaking attendance for PyCon and there's lots of good stuff there to check out. And of course, we'll link to that in the show notes so you can go disappear down a YouTube hole for a few hours, days, weeks, however long it takes you to watch all the Pythons. It's nice to have a recap of what kind of happened at PyCon so you can read about some of the goings-on.\n\nI have a Real Python topic, this is a bit of a trend we've been updating older tutorials as things change in the language. This is another one by Philip Eksi, it's called \"Logging in Python.\" It dives into the fundamentals of how to get into logging and what to do with it. There's an associated quiz which is a new trend also so you can test your knowledge after you've played with it a bit. Logging is really the next step for you to work with if you want to have something that in practice your program is outputting information to you about what's happening, potential errors or warnings, and so forth. You can control how noisy you want this thing to be, how verbose, and it's another great tool built into Python.\n\nPhilip walks you through multiple examples using the built-in Python REPL. The REPL is the read-evaluate-print loop. It's a great way to experiment as you're learning and not only with the fundamentals of Python but also if you're trying to learn something new. It's a great spot to stop and experiment with things and try things out. In this case of logging, he provides some quick advice on it and as you work through the piece, you can make changes, try things, stretch out, and experience stuff.Nothing is going to be permanent. It's a place where you can make mistakes safely and experiment with your code. \n\nSo, he starts out this whole thing on the repple. You import the logging library and start out with what's called the root logger. The first thing you dig into is the levels of logs. They are debugging mode, info level, warning level, error level, and critical level. These five levels can be adjusted by strings with specific names or by numeric values ranging from 10 to 50 in increments of 10. \n\nThe article delves into formatting your output, which is crucial as it serves as your main resource to refer back to. You can adjust the amount of information, timestamps, and other predefined attributes. It also covers logging into a file, setting parameters such as encoding, mode, and appending, as well as how variables show up and handling stack traces for errors. \n\nThe article further explores creating a custom version of the logger, instantiating it, using handlers, adding special formats, adjusting log levels, and filtering out specific information. It provides a comprehensive tour on how to use logging effectively. \n\nIt suggests that after experimenting with logging, you may have questions on implementing it in your code. Exploring other people's code and the detailed Python documentation with code examples can be beneficial. \n\nLogging may seem complicated due to its configurability, but it is designed to be compatible with other languages. While it can be daunting at first, with practice and guidance, you can effectively use logging in your projects. \n\nConfigurability allows you to differentiate output for console versus file logging, change message formats, and even add styling like bolding or coloring for better readability. It offers power and customization options but also requires a stepwise learning curve to fully leverage its capabilities.What's your first one here? I've got an article by Matias Richard titled \"It Works on My Machine.\" This is something we've all run into at one time or another where you hand your code off to someone else or it gets run in production and something ends up being different. The article is an exhaustive list of the kinds of things that can be different, causing this issue. \n\nThe article starts out with a list of the differences between a working environment and a failing one. It includes things like configuration, environment variables, schema mismatches, and data inconsistencies. There are also web-based problems like browser differences, cookie settings, and caching issues. Matias covers potential causes and code differences, such as failing to commit or merge properly.\n\nAnother section discusses miscellaneous issues like speed differences between machines, which can hide race conditions. Overall, it's a good article to read and a helpful checklist to keep on hand for hunting down elusive bugs.\n\nMy next one is from Steven Gretta, who runs the Python Coding Place blog. He talks about operator precedence using a narrative teaching style. Depending on your experience level, this style of teaching might work for you. It's great to see teachers trying new ways to explain concepts, like creating scenarios and using storytelling.\n\nOperator precedence can be tricky if you're not familiar with it. For example, multiplication will happen before addition or subtraction in Python. It's important to remember these rules, especially when dealing with conditional operations. Steven's blog delves deep into this concept, providing a unique learning experience.\n\nIn conclusion, both articles offer valuable insights into common coding issues and concepts. It's always beneficial to explore different teaching styles and approaches to deepen your understanding of programming.I thought that was cool. He also includes code examples and shows the output in a nicely formatted way that's very easy to follow. Talking about operator precedence, you can dig into this if you want. He does include links back to the Python docs that show you an actual list of everything that's in there and what precedents they have. I just think it's a great place for you if you have questions about that in your own code. Don't write things in a way where you're having to scratch your head about it. Use parentheses at the top and things will be evaluated, and you'll know the idea of explicit and organizing things. If I'm going to have multiple operations and have to think about that, that's something that I try to practice, especially if you're going to do something with conditional stuff like \"ands\" and \"or's\" and so forth. So there isn't a question in your head, well, how's that going to behave, especially for somebody else. You want to have them running away to documentation to scratch your head. Talking about heis and bugs potentially, you know, having to dig in like, how did this behave. So, yeah, it makes your code more readable for the next time round because you don't have to memorize which of these happens. It makes it good. So, anyway, I think it's a good resource. Again, written in a very narrative style. So, thanks Stephen. What's your next one? Well, two. I've got two, alright.\n\nSo, there are two new Real Python courses, both themed around space stuff. These were jointly created by myself and a new contributor, Juliano Duno. The first one is called \"Exploring Astrophysics in Python with Pandas and Matplotlib,\" and the second one is called \"Using Astropy for Astronomy with Python.\" Both of these courses are a little different from your typical \"learn x with Python\" type content. They both cover astronomy topics and then use Python to explore the topic. You don't need to know any astronomy as long as you're interested in the space stuff. In fact, I knew very little myself when I started out. Juliano is a student in astrophysics, and he came up with the problem sets and the topics, and then together we solidified them. Both courses use Pandas and Matplotlib, and neither really expects you to know anything about these libraries. They aren't meant as intros to that topic. We don't get really deep into the mechanics of Pandas, for example, but you do get a sense of what you can actually do with the library in a real-world situation.\n\nThe first course is divided into three sections. The first section covers slingshot gravity assists, which is the idea of sending a spacecraft to circle a planet to get a boost of speed or a change in direction before heading off somewhere else. The second section is on black body radiation, which is a way of measuring the wavelengths of light that come out of stars, and you use Matplotlib to graph the radiation. The example used is our own Sun, so you can see why we see the parts of light that we do. The third section is on what's called a Hertzsprung-Russell diagram, which are charts of stars comparing their brightnesses and sizes. In this section, you get to play with real-world data. Juliano found a bunch of star source material, downloaded it as a CSV, processed it in Pandas, and created a graph to see the patterns of star sizes and brightnesses clustering together.\n\nThe second course also uses Pandas and Matplotlib.But it adds a third-party library called Astropy. This library lets you do things like figure out where a star is in the sky from your perspective. This course has two sections. One is actually the perspective calculation I just mentioned. It creates a graph that allows you to see the ideal viewing time for a star and takes into account if the Sun is up because the Sun might make it hard to see one star overriding another. You know where you live and when it pops up. Of course, it isn't perfect because if you live in a large city like I do, when you can see the star is never there. There's a line in the kids movie Madagascar that goes something like \"look at all the stars,\" and yeah, downtown sometimes feels like that. \n\nAnyhow, the other part of this course calculates for conjunctions. That's when planets line up in the sky, so you go searching for when they'll be a nice little conjunction. These courses were a blast to write. I learned a whole bunch myself, and I think we've managed to make the content approachable. If you don't have a lot of background in space stuff or if you're new to Pandas or Matplotlib, there's joy in learning these pieces without deep diving and seeing how scientists can use some of this stuff. \n\nWe've talked before about coding problems as a way of learning and coding, and I'll likely never code Planet conjunctions again, but it's fun to play with something that's real-world and actually does something rather than just spitting \"Foo bar\" out to the screen. There's a lot of crossover with people who have a telescope or have dabbled here and there. This is a neat way to play with this stuff without necessarily going to University. \n\nThere are some great apps out there now that phones have gyroscopes in them and they know where they're being pointed. You can type in \"I want to see this star,\" and it basically points you at where it is. My wife took an intro to astronomy course when she was in her undergrad, and back then, it was look it up in a book and do all this math. Now it's like \"I'd like to see Beetle Juice,\" and there you go. \n\nNice developers love InfluxDB because it excels in real-time performance for time series data, offering subsecond query responses and a scalable architecture. It separates storage and compute using cost-effective Apache Parquet files to slash storage costs significantly. Its open architecture allows direct access to data for analytics, business intelligence, and machine learning, eliminating complex ETL needs. Learn more at influxdata.com. \n\nI think that takes us into projects. My project, I didn't think about it initially, but when I quickly picked it, I realized it's really cool and interesting. It's called Fast HTML, the fastest way to create an HTML app. The goal is to create something in HTML very quickly. They've been inspired by FastAPI, and the foundations are built on ASGI, HTTP, HTML, and HTMX. It uses Python and other tools like Uvicorn, Starlette, and SQLite. You can deploy these applications anywhere you can have Python running on a service like PythonAnywhere. This is a neat way to experiment with AI applications and share them with others.There are a couple other ones that are more on the commercial side that, if you create something that might expand and get much bigger, you can look at. There are a lot of examples and lots of tutorials, a couple of really interesting things though. I learned as I was kind of digging through this that they don't really use PEP eight. So, the coding style is literally Fast AI style and they kind of warn you in advance. So, it kind of looks a little strange to definitely somebody who's coming from real Python, who's been learning in the classical style of learning Python. I mean, you mentioned it, you were like, \"Oh, these are definitely going to be functional programming people.\" I'm like, yep, they have a description of that and how to kind of get used to it. It is Python, it is valid, but it's definitely not PEP eight.\n\nAnother interesting thing I found about when I went to the GitHub repo is that it didn't really have Python anywhere in the language section. That percentage meter you see, it was actually Jupiter notebooks, was like 90 something percent of it. I was like, \"H, that's interesting.\" As I dug into that, it was in the FAQ that it actually is causing them a bit of a problem in the packaging part of it and putting it out there. They can't use PyProject.toml because of the way the notebook format can be saved, so they have to use setup.py. Anyway, something interesting else I kind of learned as I went into that.\n\nThe other thing I thought was interesting is just Fast.ai looks like a good place to learn about not only AI but just sort of implementing it. They do a lot of tutorials. I was very impressed by the homepage for Fast HTML. It's got a really nice set of examples in code that you can touch and play with and instantly see the results on the page. So, there's a lot of examples that do that where you can have that sort of interactivity that I think is a lot of fun to play with.\n\nIf you're interested in the web app space and sharing your code online, this might be another place to check it out. So, you're saying that it's using ASGI and Uvicorn, so they've gone down the async path. Yeah, was it clear why or was it something that they stuck in your face at all that you have to think asynchronously, or was it just a consequence of the underlying architecture? It's not in my face at all. Okay, the code isn't necessarily pushing you toward that, but I think that might be for the hooks of some of these AI things that they want to do, or it's connection to wanting to be able to use the Jupiter notebook or something. I wonder whether it was one of those pieces.\n\nYeah, okay, yeah. The examples really didn't dig much into that as I saw that, you know, there's like lots of little things like, so it's not littered with ASYNC and AWAIT kind of thing. No, not initially, yeah. You can create an app pretty quick with several pages. They made an entire to-do list kind of thing and they actually walk you through creating it if you're interested in a few minutes, which is pretty impressive. And that has a lot to do with the HTML stuff and direct calls with that, liberal use of decorators also for routing, which reminded me a lot of Fast Style, and again, Fast API. They're building on top of these other tools, right?\n\nWhat's your project? I've got something called Watt, spelled W-A-T, and it's an object inspector. So, it's by GitHub user IG51, and it essentially combines things that you can learn about an object from DIR, VARS, and that kind of good stuff, but prints it out in a fairly easy-to-read colorized result. So, for example, if you run Watt on a string, it tells you the value in the string, the type that it's a string, its length, and then lists all of the public attributes, which for strings is a couple dozen methods, you know, all the things you can do with strings. To use Watt, you optionally install it. Yeah, I said optionally, I'll come back to that in a second, and then invoke the module with the division operator, which I found is a little odd at first. I think he's trying to aim for things that are just short and quick, and it also avoids the whole from Watt import Watt thing. You just use the module directly.\n\nSo, back to my string example, if I were in the REPL callback, I'd just say Watt SLG greeting, where greeting is my variable, and then it would do an inspection on greeting and print out the results. IG51 has gone to extremes to ensure that this is a quick little snippet kind of library. There are no dependencies, this makes it very small and fast to use. It comes with the consequence though that the colorization is all hardcoded. It's that old Ford Motors joke, the Model T comes in any color you want as long as it's black. Well, you better like his color format or you're stuck with his color format.And when I say extremes, I mean extremes. Greg 51 provides a compressed base 64 version of the library, so the documentation shows you how to use three lines of Python to decode the compressed string and execute it as an import. So, granted one of those three lines is 5,000 characters long, but it means you can copy and paste from the docs directly into your REPL and have what at your fingertips without pip installing anything. This was a new one for me, I had not seen this approach before, but it does solve an interesting sort of problem. I often find, I'm playing with something, and I need the debugger, and my favorite debugger is one that I have to install. So it's like, \"alright, there's one more thing littering my virtual M,\" and there it is. IGG 51 is trying to avoid this problem.\n\nSo yeah, what also has modifiers so you can filter what comes out. For example, `what.shorts` just shows the main parts and skips the attributes. `what.Dunder` shows hidden Dunder methods. `what.code` will actually show you the actual Python, assuming it's a pure Python library. `what.gray` disables the color output. So I guess I lied, you can get two color choices regular and extra Krispy. And of course, typing `what` on its own outputs the help information, including those modifiers that I just spoke about. There's nothing in this library you can't get with built-in functions, but there's a beauty to not having to remember which of them you're supposed to call at any given time. And there's a lot of value in a well-formatted response that just sort of wins out to me over lists of lists. The number of times I've used `dur` and then gone, \"oh right, now I got to write a for loop to pull out the part and filter it,\" that's much cleaner here. It's a neat little way of digging into things.\n\nI love these tools. I felt like I went down a rabbit hole last year of like what is happening under the covers, and so forth. And I feel like this is yet another tool that gives you another way to look at things. Because I'm older school with my coding and I don't use an IDE, I don't have auto-complete, and most of the time I don't care. But every once in a while it's like, \"what is the what method is this again?\" So this is just an alternative way instead of Googling it then you can just pop it up and it's there. If we mentioned it, there's a little thing at the very bottom of this. I noticed this is references inspired by Rich inspect, which is kind of cool.\n\nSo I think we may have mentioned that before. I've been noticing there seems to be a trend lately, a lot of the open-source libraries that I've come across, that the last couple sentences in the README is almost, \"if you don't like this, maybe try this one, this is another way of doing it.\" Which at one it's great because I think we're cross-linking to everybody. But you know I ran into it, there was I needed to solve a little problem in the Django admin, and I was digging and I'm like, \"oh, this library gets me like 80% of the way there and then there's a little thing at the bottom, it's like, well if you're trying to solve this problem here's,\" and I'm like, \"oh, there's my last 20% and I don't have to write it myself, it's there.\" So yeah, those kind of little cross-references are a great little way of finding stuff. Don't miss the bottom of these posts.\n\nWell, cool, well thanks for bringing all these articles and news and projects this week, Christopher. Sure, no worries. All right, talk to you soon. Cheers. This year, Real Python is sponsoring PyCon Africa. We wanted to bring Manny Young to discuss this year's conference, so here's my conversation with Manny Young about PyCon Africa 2024.\n\nHey Manny, welcome to the show. Hi, thank you, Chris. Nice to be here. It's really cool to talk to you. We're here to talk about PyCon Africa 2024 that's happening here at the end of September, mostly to discuss that hey, it's back on the map because it's been a little while since there's been a PyCon Africa. What are the reasons that you're bringing it back? What were some of the decisions that went into rehosting it here and having a PyCon Africa again?\n\nSo I think, like you said, it's been a while. We had the last PyCon Africa, I think the first edition happened in 2019 in Accra, Ghana. As of then, the original plan was to have it twice in a location then move to a new city, just like I think how they do it or usually have been doing it in the US. So we were also to host the 2020 version as well, but I think during the 2020, as we all know, the global pandemic happened, so we ended up using Hopin, which meant we went virtual. The team in GH actually helped coordinate the online activities on the Hopin platform.Since COVID happened, there was a period of radio silence as everyone was busy with personal life issues. However, behind the scenes, efforts were being made to revive things. Plans were made to bring back the conference in 2022 or 2023, but due to everyone's busy schedules, it was decided to aim for 2024 to avoid missing out on the opportunity.\n\nI reached out to Mar last year to discuss bringing new things to the conference. This year, regardless of the challenges, we are determined to revive and bring new plans to the conference. Changes have been made to how the conference will be run moving forward.\n\nIn episode 65, Marlene Mami discussed her involvement in the international Python Community, particularly with the PSF and helping organize PyCon Africa in 2019 and 2020. Re-energizing a conference in Africa involves factors such as community engagement and representation from different regions. An International Organizing Committee was formed with leaders from various python communities across the continent to ensure all voices are heard in planning the conference.\n\nThe International Organizing Committee works with the Local Organizing Committee in each country, like Ghana, to organize the conference. This collaborative approach aims to involve all regions in Africa and create sustainability by sharing knowledge and documenting the process of hosting a PyCon in Africa.\n\nPlans have been announced for conferences in Ghana in 2024, South Africa, and another country in 2026. This approach ensures that each hosting country learns from the experience of the previous one, creating a cohesive and inclusive conference experience for all involved.It sounds like a big part of it would be figuring out the sustainability of it through documenting and having things in place. There's a lot that goes into it. I've talked to a variety of conference organizers over the years, so I think about how the talks and conference schedule are going for you guys right now.\n\nFor now, I think the programs committee has worked really hard to come up with the various talk selections. I think for Pon Africa, we have different tracks like imaging technology, data education, and community. Trying to strike a balance with that as well. You have no control over what people submit, so you might find yourself in a situation where if you're not careful, you end up getting a lot of emerging technologies than even other places. So trying to strike the balance to have diverse talks is something they really worked on coming up with. Hopefully, by next week, we are supposed to be releasing more things like the schedule. Things have been a little bit slow just trying to make sure we strike a balance because we have international speakers who we need to care for true financial aid. Some discussions are still going on with the finance team and the sponsorship team, which also have influence on that as well. But I'm positive that by the close of next week, everything should be finalized because I think the financial team has been reaching out to people, sending out emails and all that. So yeah, we would have quite diverse talks - scientific computing, AIML, web development. The community as well. We also have to strike that balance with the keynote speakers as well that will be coming this year. We have the executive director of the PSF, Marin, and Sam speaking on different areas. That'll be quite interesting. Is that Deb you're mentioning from the PSF? Yeah, okay. I had her on the show a year and a half ago. Anyway, great.\n\nSome voices that people have heard on here before. That's great. I think another thing too is we also try to see how we can cater to different experience levels - beginners, intermediate, and experts. For Africa, it's still new, we have a lot of beginners, then maybe the intermediate level. We have some experts, but percentage-wise, they won't be that much compared to the intermediate level and the beginners as well. So you would want the situation where you have to really tune your talks to make sure that they're of interest and not flying over everyone's head. Exactly.\n\nThis week, I want to shine a spotlight on another Real Python video course. This course focuses on Python dictionaries, which, since Python 3.6, have become ordered and now maintain insertion order. But how do you implement that into your own programs as they aren't inherently like other sequence data types? This course is titled \"Sorting Dictionaries in Python: Keys, Values, and More.\" It's based on a tutorial by Ian Curry, and in the video course, previous guest Steven Gretta takes you through reviewing how to use the sorted function, learning how to get dictionary views to iterate over, understanding how dictionaries are cast to lists during sorting, learning how to specify a sort key to sort a dictionary by value, key, or nested attribute, reviewing dictionary comprehensions and the constructor to rebuild your dictionaries, and considering other alternative data structures for your key-value data. If you're wanting to learn more about Python dictionaries and how to organize your data, I think this course will be a worthy investment of your time. Real Python video courses are broken into easily consumable sections and where needed include code examples for the technique shown. All lessons have a transcript including closed captions. Check out the video course, you can find a link in the show notes or you can find it using the search tool on Real Python.\n\nHow did you get involved? It sounds like you know a lot of the players here, but how did you get involved in organizing a conference like this?\n\nSo, I think everything started with us kicking off the community in Ghana. I was part of the founders of Python Ghana, which I think we officially kicked off in 2018. That was where we got to meet people like Daniel and Marin, who were instrumental in setting up the community here in Ghana. I was part of the Jangle Girls movement, where we were part of the coaches moving Jangle Girls from one city to the other. Then when we started and we ended up seeing the interest, we didn't say, okay, we are actually growing and how we need to have a community around this.I think that was when I reached out to P ladies to see how we can start PES Ghana and the whole Community structuring now came up. We decided to have PES Ghana, P data Ghana, as well as other initiatives like pie clubs, which is something we've fully started. We are trying to have clubs in various tertiary institutions where students can meet to keep learning about Python and related topics.\n\nWe also had pie scholar as well as various user groups around the country. I reached out to most of the coaches who were working with Jungle Girls to let them understand our vision. We asked them to start user groups in different cities like Accra, H, Cape Coast, and Kumasi. This was how we started having events and activities to engage the community.\n\nFrom then until now, we have developed a structure to ensure everything runs smoothly. We became one of the active communities and even got the opportunity to host PyCon Africa in 2019. I was leading the efforts and worked with others to make the conference successful. In 2020, we had to adapt to the pandemic by hosting virtual events.\n\nThis year, we are back in Accra, which wasn't the original plan. We had considered moving to another city on the continent but decided to return to Accra due to our experience and the desire to have a strong comeback. We have announced plans for this year, next year, and even 2022 to continue growing and engaging with the community.\n\nI got involved with the community organizing based on the progress we made in Ghana. The pie clubs initiative sounds interesting and is mainly at the university level. We sent proposals to the PSF to introduce this education initiative in our community, similar to what other groups like Google Developer Students Clubs have done. I advocated for using Python in education, especially in science-related fields, and we have seen success with universities like Catholic University in Sani having active pie clubs.\n\nOverall, we have had a successful pilot phase with universities in the country, and the feedback has been positive. The Vice Chancellor of one university even noticed students learning Python and was impressed by the initiative. We are continuing to expand and promote Python education in Ghana.Club Python Club is where they are learning how to use the Python programming language. As an African, the word python was initially confusing, but after an explanation, it sparked interest. A discussion was initiated with the community, leading to the inclusion of Python in the students' curriculum. This success story led to many universities now teaching Python, not restricting it to specific departments.\n\nThe idea of creating a club where students from various sectors can come together to learn and grow was proposed. The goal is to train future mentors and speakers, creating a mentorship mindset within the community. The roadmap includes opportunities for students to share their learning experiences and work on projects, fostering growth and development.\n\nThe plan involves a structured approach from high school to local universities, with a focus on creating user groups and communities. The goal is to have a landing spot for individuals at every stage of their learning journey, promoting collaboration and knowledge-sharing. Efforts are being made to document and expand these initiatives, with discussions in Nigeria and Dubai showcasing interest in similar programs.\n\nPython is increasingly utilized in Ghana, particularly in data science and analytics. While some companies may not use Python as a primary language, it is still employed for data cleaning and analysis. The emerging trend of Python in Ghana's industries highlights its versatility and importance in the data-driven landscape.Maybe the libraries on the Python to do other things. So we have the banking sector, and we also have the academic aspects where some of the research is also used by because we've come across some of these groups. I think it's gradually growing because there was a time when most developers didn't look at Python, they were more into PHP and other web languages. But with a movement like PyCon, the youth are the leaders of tomorrow, and they are going to bring Python with them when they have their startups in the future.\n\nI think it's actually growing, and most industries are now making use of it locally here in Ghana, specifically in certain areas of the company. One of the things I was wondering about was how someone wanting to help you guys and sponsor the conference can reach out to you. For PyCon Africa, we have the financial theme and the sponsorship theme on the website. You can check the sponsor tab for different tiers and choose how you can help us. We are flexible, and you can reach out to the team for assistance.\n\nAnother way we get help, especially with ticket pricing, is through sharing tickets. If you want to buy tickets for people to attend the conference, you can buy as many as you want. We also discuss donation channels during our meetings for those who want to donate to the conference. These are the various ways you can support the conference.\n\nAs for plans for attendance, travel, and accommodations, it's something that will be growing over the years. Traveling within Africa can be more expensive than traveling out of Africa to the West, so sponsorship really helps balance it out. As we move along, we hope to have more paths available for funding such events and more representation from across Africa.\n\nSome local organizations may not see the need to support a conference like this if they don't use Python, but as more startups and companies understand the importance of supporting Python, we may see more local groups getting involved. Some companies in Ghana are already supporting the conference because they understand the value of Python. Engaging with local user groups and businesses can also help in getting industry support. International organizations have been a great help, and some of them will be sponsoring us this year too.It's just to have maybe that growth and maybe when they see what is happening on the continent because we have Africa, the youngest population. So if we can all push and learn this, I believe in the future we would have a lot of talents and a lot of skills here. Fighting will become a household name. \n\nLots to share there. Do you have a specific call to action? For now, I think we just, I would just say, well, those who are interested in attending the conference can maybe hop in and try. Maybe FY, we know it's kind of last minute but I think yeah, there are some people who can just make that decision that hey, I want to go to Pon Africa this year. So I think yeah, the articat are up, you can reach out in case maybe you need anything like maybe invitation, visa invitation, and all that. We get it available for you. So I think what I'll just say is yeah, we welcome everyone who is interested to come to the conference. We will be really excited to welcome you and have a great time together. \n\nIt's awesome. Well, Manny, thanks so much for coming on the show. It's really great to talk to you. \n\nThank you so much, Chris. I think it's really been fun being here and yeah, this is something new to me. So I'm glad. I've always been behind the scenes so I'm gradually now coming up and it got to be the face and the voice. It's really nice being here. \n\nThanks so much for coming on. Thank you. And don't forget for your time series needs, use InfluxDB. It's trusted by leading companies for its scalability, real-time performance, and easy integration with modern data stacks. Start for free at influxdata.com. \n\nI want to thank Christopher Trudeau and Manny Young for coming on the show this week and I want to thank you for listening to the Real Python podcast. Make sure that you click that follow button in your podcast player. And if you see a subscribe button somewhere, remember that the Real Python podcast is free. If you like the show, please leave us a review. You can find show notes with links to all the topics we spoke about inside your podcast player or at realpython.com/podcast. And while you're there, you can leave us a question or a topic idea. I've been your host, Christopher Bailey, and look forward to talking to you soon."
}